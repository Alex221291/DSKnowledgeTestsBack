// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dsknowledgetestsback.Data;

#nullable disable

namespace dsknowledgetestsback.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221207092423_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("dsknowledgetestsback.Models.CompletedTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CountFalse")
                        .HasColumnType("int");

                    b.Property<int>("CountTrue")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCompleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("CompletedTests");
                });

            modelBuilder.Entity("dsknowledgetestsback.Models.Education", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a0d4761-f154-46a3-bc13-d29828ec7dc2"),
                            Name = "Basic"
                        },
                        new
                        {
                            Id = new Guid("ed10f980-6d61-487b-a2a1-7224ece8467b"),
                            Name = "Secondary"
                        },
                        new
                        {
                            Id = new Guid("9d1491fe-0701-4c76-8cb4-1be041dbad87"),
                            Name = "SecondarySpecial"
                        },
                        new
                        {
                            Id = new Guid("b50842e5-77bc-47dd-8c18-b4be6c68c80b"),
                            Name = "Higher"
                        });
                });

            modelBuilder.Entity("dsknowledgetestsback.Models.Faq", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Faq");
                });

            modelBuilder.Entity("dsknowledgetestsback.Models.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateData")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FeedbackCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("dsknowledgetestsback.Models.FeedbackCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FeedbackCategories");
                });

            modelBuilder.Entity("dsknowledgetestsback.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListAnswersToString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListCurrentAnswersToString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Mark")
                        .HasColumnType("int");

                    b.Property<Guid>("QuestionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("dsknowledgetestsback.Models.QuestionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuestionTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8614741-3f5b-4b90-9a8c-aff19defeb1a"),
                            Name = "OneAnswer"
                        },
                        new
                        {
                            Id = new Guid("354e8081-11e3-409d-acc4-c484f1456c23"),
                            Name = "MultipleAnswer"
                        },
                        new
                        {
                            Id = new Guid("17fb7cce-96a5-45cc-9e3f-f170ce183457"),
                            Name = "EnterAnswer"
                        });
                });

            modelBuilder.Entity("dsknowledgetestsback.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bd396515-6996-4cf1-ad47-3080d68e1e04"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("0770d5ad-3a2f-4d0e-9ed4-6fda5da57861"),
                            Name = "Manager"
                        },
                        new
                        {
                            Id = new Guid("0ff5bc58-08a1-4e94-8448-174b1f047921"),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("dsknowledgetestsback.Models.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CountQuestion")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TestCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserCreatedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TestCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("dsknowledgetestsback.Models.TestCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TestCategories");
                });

            modelBuilder.Entity("dsknowledgetestsback.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EducationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EducationId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77e4ea5e-26f7-4c76-aeb1-1dd447856135"),
                            DataCreated = new DateTime(2022, 12, 7, 12, 24, 22, 932, DateTimeKind.Local).AddTicks(8173),
                            EducationId = new Guid("b50842e5-77bc-47dd-8c18-b4be6c68c80b"),
                            Email = "admin@mail.ru",
                            IsActivated = true,
                            IsDeleted = false,
                            Login = "admin@",
                            Password = "F8450A97CC7E38E6D109425C87B41634",
                            RoleId = new Guid("bd396515-6996-4cf1-ad47-3080d68e1e04")
                        });
                });

            modelBuilder.Entity("dsknowledgetestsback.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b288fbb4-fac9-4404-9f50-b8d6408d5036"),
                            Adress = "",
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "",
                            LastName = "",
                            PhoneNumber = "",
                            SurName = "",
                            UserId = new Guid("77e4ea5e-26f7-4c76-aeb1-1dd447856135")
                        });
                });

            modelBuilder.Entity("dsknowledgetestsback.Models.CompletedTest", b =>
                {
                    b.HasOne("dsknowledgetestsback.Models.Test", "Test")
                        .WithMany("CompletedTests")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dsknowledgetestsback.Models.User", "User")
                        .WithOne("CompletedTest")
                        .HasForeignKey("dsknowledgetestsback.Models.CompletedTest", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dsknowledgetestsback.Models.Feedback", b =>
                {
                    b.HasOne("dsknowledgetestsback.Models.FeedbackCategory", "FeedbackCategory")
                        .WithMany("Feedbacks")
                        .HasForeignKey("FeedbackCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dsknowledgetestsback.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeedbackCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dsknowledgetestsback.Models.Question", b =>
                {
                    b.HasOne("dsknowledgetestsback.Models.QuestionType", "QuestionType")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dsknowledgetestsback.Models.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionType");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("dsknowledgetestsback.Models.Test", b =>
                {
                    b.HasOne("dsknowledgetestsback.Models.TestCategory", "TestCategory")
                        .WithMany("Tests")
                        .HasForeignKey("TestCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dsknowledgetestsback.Models.User", "User")
                        .WithMany("Test")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dsknowledgetestsback.Models.User", b =>
                {
                    b.HasOne("dsknowledgetestsback.Models.Education", "Education")
                        .WithMany("Users")
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dsknowledgetestsback.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Education");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("dsknowledgetestsback.Models.UserProfile", b =>
                {
                    b.HasOne("dsknowledgetestsback.Models.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("dsknowledgetestsback.Models.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("dsknowledgetestsback.Models.Education", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("dsknowledgetestsback.Models.FeedbackCategory", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("dsknowledgetestsback.Models.QuestionType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("dsknowledgetestsback.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("dsknowledgetestsback.Models.Test", b =>
                {
                    b.Navigation("CompletedTests");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("dsknowledgetestsback.Models.TestCategory", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("dsknowledgetestsback.Models.User", b =>
                {
                    b.Navigation("CompletedTest")
                        .IsRequired();

                    b.Navigation("Feedbacks");

                    b.Navigation("Test");

                    b.Navigation("UserProfile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
